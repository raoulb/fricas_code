)abbrev package DISPERS Dispersion
++ Author: Raoul Bourquin
++ Date Created: 30 August 2014
++ Date Last Updated: 9 October 2014
++ Description:
++ Compute the dispersion of polynomials.
++ References:
++ Yiu-Kwong Man and Francis J. Wright,
++ 'Fast Polynomial Dispersion Computation and its Application to Indefinite Summation',
++ Proceedings of the International Symposium on Symbolic and Algebraic Computation, 1994, Pages 175-180
++ http://dl.acm.org/citation.cfm?doid=190347.190413
Dispersion(R) : Exports == Implementation where
--Dispersion(R : CommutativeRing, UP : UnivariatePolynomialCategory R) : Exports == Implementation where
--Dispersion(R, Polynomial(R)) : Exports == Implementation where
  -- An arbitrary commutative ring, being an UFD is sufficient for the algorithm.
  --R : Join(UniqueFactorizationDomain, CharacteristicZero, RetractableTo Integer)
  R : Join(EuclideanDomain, CharacteristicZero, RetractableTo Integer)

  P ==> Polynomial(R)
  Z ==> Integer
  SZ ==> Set(Z)


  Exports ==> with

    dispersion : P -> Z
      ++

    dispersion : (P, P) -> Z
      ++

    dispersionSet : P -> SZ
      ++

    dispersionSet : (P, P) -> SZ
      ++


  Implementation ==> add

    NNI ==> NonNegativeInteger
    QR ==> Fraction(R)
    UP ==> SparseUnivariatePolynomial(P)
    S ==> Symbol
    -- We need to factor in R[x]
    MVF ==> MultivariateFactorize(S, IndexedExponents S, R, P)
    E ==> PolynomialShift(R)

    innerDispersion(p:UP, q:UP, s:S) : SZ ==
      degp := degree(p)
      degq := degree(q)
      J : SZ := set [0]
      -- Dispersion for constant polynomials is always zero
      degp < 1 => J
      degq < 1 => J
      -- Factor polynomials over R
      fp := factors factor(p)$MVF
      fq := factors factor(q)$MVF
      -- TODO: Iterate really over pairs only
      for pi in fp repeat
        for qi in fq repeat
          fpi := pi.factor
          fqi := qi.factor
          -- Degree check
          dpi := degree(fpi)
          dqi := degree(fqi)
          (dpi ~= dqi) => "iterate"
          -- Coefficient check
          an := leadingCoefficient(fpi)
          bn := leadingCoefficient(fqi)
          (an ~= bn) => "iterate"
          -- Check for integral dispersion
          an1 := coefficient(fpi, (dpi-1)::NNI)
          bn1 := coefficient(fqi, (dqi-1)::NNI)
          alpha : QR := retract(bn1 - an1)@R / retract(dpi*an)@R
          retractIfCan(alpha)@Union(R,"failed") case "failed" => "iterate"
          -- Check for known dispersion value
          a := retract(alpha)@Z
          member?(a, J) => "iterate"
          -- Check for really being a shift
          pim := multivariate(fpi, s)
          qim := multivariate(fqi, s)
          (dpi > 1) and (shift(pim, a)$E ~= qim) => "iterate"
          -- Found new shift value
          J := insert!(a, J)
      J

    compatible?(p:P, q:P) : Boolean ==
      vp := variables(p)
      vq := variables(q)
      #vp ~= 1 or #vq ~= 1 => false
      (vp = vq) @ Boolean

    dispersionSet(p:P, q:P) : SZ ==
      --~compatible?(p, q) => "failed"
      x := first variables p
      pu := univariate(p, x)
      qu := univariate(q, x)
      innerDispersion(pu, qu, x)

    dispersionSet(p:P) : SZ ==
      dispersionSet(p, p)

    dispersion(p:P, q:P) : Z ==
      max dispersionSet(p, q)

    dispersion(p:P) : Z ==
      dispersion(p, p)
