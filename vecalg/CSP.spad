)abbrev package CNTSPAK CountingSortPackage
++ Author: Raoul Bourquin
++ Date Created: 7 October 2012
++ Date Last Updated: 1 July 2014
++ Description:
++ This package exports counting sorting algorithms
CountingSortPackage(S, A) : Exports == Implementation where
  S : Type
  A : Join(IndexedAggregate(Integer, S), finiteAggregate, shallowlyMutable)

  NNI ==> NonNegativeInteger

  Exports == with

    countingBubbleSort : (A, (S, S) -> Boolean) -> Record(sorted:A, exchanges:NNI)
        ++ Counting version of bubble sort

    countingBubbleSort! : (A, (S, S) -> Boolean) -> Record(sorted:A, exchanges:NNI)
        ++ Counting version of bubble sort

    countingInsertionSort! : (A, (S, S) -> Boolean) -> Record(sorted:A, exchanges:NNI)
        ++ Counting version of insertion sort

    if A has UnaryRecursiveAggregate(S) then
      countingMergeSort : (A, (S, S) -> Boolean) -> Record(sorted:A, exchanges:NNI)
        ++ Counting version of merge sort

    if S has OrderedSet then
      countingBubbleSort : A -> Record(sorted:A, exchanges:NNI)
        ++ Counting version of bubble sort

      countingBubbleSort! : A -> Record(sorted:A, exchanges:NNI)
        ++ Counting version of bubble sort

      countingInsertionSort! : A -> Record(sorted:A, exchanges:NNI)
        ++ Counting version of insertion sort

      if A has UnaryRecursiveAggregate(S) then
        countingMergeSort : A -> Record(sorted:A, exchanges:NNI)
          ++ Counting version of merge sort

  Implementation == add

    countingBubbleSort!(m, f) ==
      nrexchanges : NNI := 0
      n := #m
      for i in 1..(n-1) repeat
        for j in n..(i+1) by -1 repeat
          if f(m.j, m.(j-1)) then
            swap!(m, j, j-1)
            nrexchanges := nrexchanges + 1
      [m, nrexchanges]

    countingBubbleSort(m, f) ==
      countingBubbleSort!(copy m, f)

    countingInsertionSort!(m, f) ==
      nrexchanges : NNI := 0
      for i in 2..#m repeat
        j := i
        while j > 1 and f(m.j, m.(j-1)) repeat
          swap!(m, j, j-1)
          nrexchanges := nrexchanges + 1
          j := qcoerce(j - 1)@PositiveInteger
      [m, nrexchanges]


    if S has OrderedSet then
      countingBubbleSort(m) == countingBubbleSort(m, _<$S)
      countingBubbleSort!(m) == countingBubbleSort!(m, _<$S)
      countingInsertionSort!(m) == countingInsertionSort!(m, _<$S)


    if A has UnaryRecursiveAggregate(S) then
      -- Put the code here as we need first, rest functions which
      -- are not available for the general A defined above

      countingMergeSort(m, f) ==
        n : NNI := #m
        n <= 1 => [m, 0]

        -- Split and descend
        nhalf : NNI := shift(n, -1)
        ra := countingMergeSort(first(m,nhalf), f)
        rb := countingMergeSort(rest(m,nhalf), f)
        sla := ra.sorted
        slb := rb.sorted
        nrexchanges := ra.exchanges + rb.exchanges

        -- Merge
        result := copy m
        na : NNI := #sla
        nb : NNI := #slb
        ia : NNI := 1
        ib : NNI := 1

        for j in 1..n repeat
          if ia <= na and ib <= nb then
            if f(sla(ia), slb(ib)) then
              -- We have to take the element from the first list
              result(j) := sla(ia)
              diff : NNI := 0
              ia := ia + 1
            else if f(slb(ib), sla(ia)) then
              -- We can take the element from the second list
              result(j) := slb(ib)
              diff : NNI := (na - ia + 1)::NNI
              ib := ib + 1
            else
              -- Heads of both lists compare equal, take from the
              -- first list to avoid unnecessary transpositions
              result(j) := sla(ia)
              diff : NNI := 0
              ia := ia + 1
            nrexchanges := nrexchanges + diff

          -- Only one list still has elements
          else if ia <= na then
            result(j) := sla(ia)
            ia := ia + 1

          else if ib <= nb then
            result(j) := slb(ib)
            ib := ib + 1

        [result, nrexchanges]


      if S has OrderedSet then
        countingMergeSort(m) == countingMergeSort(m, _<$S)
