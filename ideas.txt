Ideas on how the rule based integration could work
==================================================

Some ideas for porting RUBI to Axiom
This is still work in progress. All
explicit function names are up to
discussion.


Definition of rules
-------------------

An integration rule could be defined as a structure

  rule := { pattern, result }

such that:

  Integral(pattern, x) = result

holds.

Examples of simple rules are:

  r := { x^n,       x^(n+1)/(n+1) }
  r := { sin(x),    -cos(x) }

or more general

  r := { sin(a*x+b), -cos(a*x+b)/a }

The three rules above correspond to integrals that can
trivially be done by the Risch code. They serve only as
examples and the principle carries over to more complex
cases well beyond the (current) integration code.

Handling of more or less special functions is easily possible:

  r := { exp(-x^2), sqrt(pi)/2*erf(x) }
  r := { Ai'(x),    Ai(x) }

These two integrals are currently out of range for the
algorithmic integration code. (Some interesting work was
done for the first case though)


Predicates
----------

In the examples above we see that the results are sometimes
only valid under certain conditions. For example here:

  r := { x^n, x^(n+1)/(n+1) }

we have to assure that n is not -1. We need a general way
to incorporate such conditions on parameters into the
integration rule. Hence we extend the definition to:

  rule := { pattern, result, predicates }

The third part called 'predicates' is an expression
that can be evaluated to a boolean value after substitution
of placeholder values. It is in general build up by boolean
and, or, not operations from simpler predicates.

  predicates := boolean combinations of one or more single predicate
  predicate := function: parameters -> Boolean value

A simple predicate for example is:

  p := n ~= -1
  p := not( n = -1 )

or:

  p := m > n/3

An example of a composite predicate would be:

  p1 := integer? n
  p2 := even? m
  p3 := n > 2
  p4 := m = n/2

  p := p1 and p2 or p3 and p4

written out we find:

  p := n integer and m even or n>2 and m=n/2

There can be "couplings" between all the input parameters
describing complex relations.

Note that we can not express p1 and p2 this way in Axiom
right now. (I'm not sure of how much use the following is:

(34) -> 'integer? k

   (34)  'integer?(k)
                                                    Type: Expression(Integer)

Piecewise expressions
---------------------

Simplification of rulesets by using piecewise expressions
is sometimes possible. I suppose this can solve two separate
issues at once.

Instead of the two rules:

  r1 := {x^n, x^(n+1)/(n+1), n ~= -1}
  r2 := {x^n, log(x), n == -1}

we could write one single rule:

  r := {x^n,  [x^(n+1)/(n+1) if n ~= -1] }
       {      [log(x)        if n = -1] }

with a piecewise expression as result and no further predicates
in the rule. We managed to get the predicates from the rule
into the resulting expression. The advantage is that we can
leave the evaluation of this expression to standard machinery
outside the RUBI code. As a byproduct the number of rules
will be reduced a bit.


Symbolic parameters
-------------------

Additionally, we have no other choice than doing it this way when
working with symbolic parameters. If we only know that n is an integer
but have no information about its value then the best we can
do is returning an unevaluated piecewise expression.

Note that currently the integration code produces:

(22) -> integrate(x^n,x)

             n log(x)
         x %e
   (22)  ------------
             n + 1
                                         Type: Union(Expression(Integer),...)
and we fail with:

(23) -> eval(%, n=-1)

   >> Error detected within library code:
   catdef: division by zero

approaching more carefully by using limits does not
give a useful result:

(26) -> limit(%, n=-1)

   (26)  [leftHandLimit= - infinity,rightHandLimit=  + infinity]
Type: Union(Record(leftHandLimit: Union(OrderedCompletion(Expression(Integer)),"failed"),rightHandLimit: Union(OrderedCompletion(Expression(Integer)),"failed")),...)


Collecting rules in rulesets
----------------------------

Single rules will be collected into rulesets. The rules therein
have a well defined order:

  rl := [ rule1, rule2, ... ]

Rulesets allow for inplace(?) insertion and deletion of single rules.
Also we can concat rulesets to form a new ruleset containing all rules
of the old sets in the given order:

  rl := rl1 & rl2 & rl3 ...

Rulesets could be printed in a table like form:

  #1  pattern1  result1  conditions1
  #2  pattern2  result2  conditions2
  #3  ...

including the reference number at the start of each line. These
numbers can in used to reference single rules for deletion etc.

These are some features not present in the current Ruleset domain.


Extensions by user
------------------

Beside the standard ruleset provided out of the box, the architecture
should allow for user specified rulesets. If an integral can not be solved
by the standard set, the user may wish to add a new rule. This can be useful
for new special functions too.


Solving integrals
-----------------

For solving an integral we call:

  rubiIntegrate( f(x), x)

and use the builtin default ruleset. For more davnced usage
adding custom rules to the process we have:

  rubiIntegrate( f(x), x, ruleset )

or even:

  rubiIntegrate( f(x), x, listOfRulesets )

This allows us to incorporate new rules without changing
any RUBI code.


Handling larger collections of rules
------------------------------------

Rulebase system can become very slow if the collection of rules is large.
An idea is to group the rules by some special operatos/functions. We could
try order the operators by specialness:

  polynomials < sin,cos,exp < gamma < erf, fresnel < bessel < ...

Of course this order is not strict and unique and also not as linear as shown.
Next we can work along this chain from top to bottom (really?) an drop all
rulesets for the operators not present in the expression we aim to integrate.
This more tree-like order of rules should avoid many unnecessary tries.
