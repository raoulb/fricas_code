<<package MAMA MatrixManipulation>>=
)abbrev package MAMA MatrixManipulation
++ Author: Raoul Bourquin
++ Date Created: 17 November 2012
++ Date Last Updated: 17 November 2012
++ Description:
++ Some functions for manipulating (dense) matrices.
++ Supported are various kinds of slicing, splitting
++ and stacking of matrices. The functions resemble
++ operations often used in numerical linear algebra
++ algorithms.
MatrixManipulation(R, Row, Col, M) : Exports == Implementation where
  R : Field
  Row : FiniteLinearAggregate R
  Col : FiniteLinearAggregate R
  M : MatrixCategory(R, Row, Col)

  I ==> Integer
  PI ==> PositiveInteger
  LI ==> List I
  SI ==> Segment I
  LPI ==> List PI
  SPI ==> Segment PI


  Exports ==> with

    -- Slicing matrices

    -- How to call arow, acolumn? Name clashed with usual row, column
    -- Package call is ugly because of many parameters of MAMA

    element : (M, PI, PI) -> M
      ++ \spad{element} returns a single element out of a matrix.
      ++ The element is put into a one by one matrix.

    arow : (M, PI) -> M
      ++ \spad{arow} returns a single row out of a matrix.
      ++ The row is put into a one by N matrix.

    rows : (M, LPI) -> M
      ++ \spad{rows} returns several rows out of a matrix.
      ++ The rows are stacked into a matrix.

    rows : (M, SPI) -> M
      ++ \spad{rows} returns several rows out of a matrix.
      ++ The rows are stacked into a matrix.

    acolumn : (M, PI) -> M
      ++ \spad{acolumn} returns a single column out of a matrix.
      ++ The column is put into a one by N matrix.

    columns : (M, LPI) -> M
      ++ \spad{columns} returns several columns out of a matrix.
      ++ The columns are stacked into a matrix.

    columns : (M, SPI) -> M
      ++ \spad{columns} returns several columns out of a matrix.
      ++ The columns are stacked into a matrix.

    subMatrix : (M, LPI, LPI) -> M
      ++ \spad{subMatrix} returns several elements out of a matrix.
      ++ The elements are stacked into a submatrix.

    subMatrix : (M, SPI, SPI) -> M
      ++ \spad{subMatrix} returns several elements out of a matrix.
      ++ The elements are stacked into a submatrix.

    diagonalMatrix : (M, I) -> M
      ++ \spad{diagonalMatrix} returns a diagonal out of a matrix.
      ++ The diagonal is put into a matrix of same shape as the
      ++ original one. Positive integer arguments select upper
      ++ off-diagonals, negative ones lower off-diagonals.

    diagonalMatrix : M -> M
      ++ \spad{diagonalMatrix} returns the main diagonal out of
      ++ a matrix. The diagonal is put into a matrix of same shape
      ++ as the original one.

    bandMatrix : (M, LI) -> M
      ++ \spad{bandMatrix} returns multiple diagonals out of a matrix.
      ++ The diagonals are put into a matrix of same shape as the
      ++ original one. Positive integer arguments select upper
      ++ off-diagonals, negative ones lower off-diagonals.

    bandMatrix : (M, SI) -> M
      ++ \spad{bandMatrix} returns multiple diagonals out of a matrix.
      ++ The diagonals are put into a matrix of same shape as the
      ++ original one. Positive integer arguments select upper
      ++ off-diagonals, negative ones lower off-diagonals.

    -- Stacking matrices

    horizConcat : (List M) -> M
      ++ \spad{horizConcat} concatenates matrices column wise.

    vertConcat : (List M) -> M
      ++ \spad{vertConcat} concatenates matrices row wise.

    blockConcat : (List List M) -> M
      ++ \spad{blockConcat} concatenates matrices row and
      ++ column wise, building a block matrix. The order
      ++ is row major as in \spad{matrix}.

    -- Splitting matrices

    vertSplit : (M, PI) -> List M
      ++ \spad{vertSplit} splits a matrix into multiple
      ++ submatrices row wise.

    vertSplit : (M, LPI) -> List M
      ++ \spad{vertSplit} splits a matrix into multiple
      ++ submatrices row wise.

    horizSplit : (M, PI) -> List M
      ++ \spad{horizSplit} splits a matrix into multiple
      ++ submatrices column wise.

    horizSplit : (M, LPI) -> List M
      ++ \spad{horizSplit} splits a matrix into multiple
      ++ submatrices column wise.

    blockSplit : (M, PI, PI) -> List List M
      ++ \spad{blockSplit} splits a matrix into multiple
      ++ submatrices row and column wise, dividing
      ++ a matrix into blocks.

    blockSplit : (M, LPI, LPI) -> List List M
      ++ \spad{blockSplit} splits a matrix into multiple
      ++ submatrices row and column wise, dividing
      ++ a matrix into blocks.


  Implementation ==> add

    minr ==> minRowIndex
    maxr ==> maxRowIndex
    minc ==> minColIndex
    maxc ==> maxColIndex

    cumSum(l: LI) : LI == (s:I:=0; [(s:=s+i) for i in l])

    element(A, r, c) ==
      matrix([[A(r,c)]])


    arow(A:M, r:PI) : M ==
      subMatrix(A, r, r, minc A, maxc A)


    rows(A:M, lst:LPI) : M ==
      ls := [arow(A, r) for r in lst]
      reduce(vertConcat, ls)


    -- Whats wrong here?
    rows(A:M, si:SPI) : M ==
      error "Not implemented"
    --  rows(A, expand(si)::LPI)

    -- Small issue: expand(SPI) ---> LI


    acolumn(A:M, c:PI) : M ==
      subMatrix(A, minr A, maxr A, c, c)


    columns(A:M, lst:LPI) : M ==
      ls := [acolumn(A,c) for c in lst]
      reduce(horizConcat, ls)


    -- Whats wrong here?
    columns(A:M, si:SPI) : M ==
      error "Not implemented"
    --  columns(A, expand(si)::LPI)


    diagonalMatrix(A, n) ==
      nr := nrows(A)
      nc := ncols(A)

      n > (nc-1) => error "requested diagonal out of range"
      n < 0 and abs(n) > (nr-1) => error "requested diagonal out of range"

      B := zero(nr,nc)

      if n >= 0 then
        dl := min(nc-n, nr)
	sr := minr(A)
	sc := minc(A) + n
      else
        dl := min(nc, nr-abs(n))
	sr := minr(A) + abs(n)
	sc := minc(A)

      for i in 0..(dl-1) repeat
        qsetelt!(B, sr+i, sc+i, A(sr+i, sc+i))

      B


    diagonalMatrix(A) ==
      diagonalMatrix(A, 0)


    bandMatrix(A:M, ln:LI) : M ==
      -- Really inefficient
      reduce("+", [diagonalMatrix(A,d) for d in ln])


    bandMatrix(A:M, si:SI) : M ==
      bandMatrix(A, expand(si))


    subMatrix(A:M, lr:LPI, lc:LPI) : M ==
      -- Really inefficient
      lle := [[ element(A,r,c) for c in lc] for r in lr]
      blockConcat(lle)


    subMatrix(A:M, sr:SPI, sc:SPI) : M ==
      subMatrix(A, low sr, high sr, low sc, high sc)


    -- Stack matrices


    horizConcat(LA) ==
      reduce(horizConcat, LA)


    vertConcat(LA) ==
      reduce(vertConcat, LA)


    blockConcat(LLA: List List M) : M ==
      reduce(vertConcat, [reduce(horizConcat, LA) for LA in LLA])


    -- Split matrices


    vertSplit(A:M, r:PI) : List M ==
      dr := nrows(A) exquo r
      dr case "failed" => error "split does not result in an equal division"
      mir := minr A
      mic := minc A
      mac := maxc A
      [ subMatrix(A, mir+i*dr, mir+(i+1)*dr-1, mic, mac) for i in 0..(r-1) ]


    vertSplit(A:M, lr:LPI) : List M ==
      reduce("+", lr) ~= nrows(A) => error "split does not result in proper partition"

      -- Could use a cumSum here
      result : List M := empty()

      mic := minc A
      mac := maxc A
      a := minr A

      for dr in lr repeat
        b := a + dr - 1
        result := cons(subMatrix(A, a, b, mic, mac), result)
        a := b

      result


    horizSplit(A:M, c:PI) : List M ==
      dc := ncols(A) exquo c
      dc case "failed" => error "split does not result in an equal division"
      mir := minr A
      mar := maxr A
      mic := minc A
      [ subMatrix(A, mir, mar, mic+i*dc, mic+(i+1)*dc-1) for i in 0..(c-1) ]


    horizSplit(A:M, lc:LPI) : List M ==
      reduce("+", lc) ~= ncols(A) => error "split does not result in proper partition"

      --l := cumSum(lc)
      --mir := minr A
      --mar := maxr A
      --result := [ subMatrix(A, mir, mar, l(i), l(i+1)-1) for i in 0..(#l-1) ]

      -- Could use a cumSum here
      result : List M := empty()

      mir := minr A
      mar := maxr A
      a := minc A

      for dc in lc repeat
        b := a + dc - 1
        result := cons(subMatrix(A, mir, mar, a, b), result)
        a := b

      result


    blockSplit(A:M, nr:PI, nc:PI) : List List M ==
      error "Not implemented"
      --map( (X:M):(List M) +-> horizSplit(X, nc)::(List M), vertSplit(A, nr))
      --map( (X:M):(List M) +-> horizSplit(X, nc)::(List M), vertSplit(A, nr))$List(List(M))

      -- works fine in interpreter
      --map(X+-> horizSplit(X, 3), vertSplit(m, 2))


    blockSplit(A:M, lr:LPI, lc:LPI) : List List M ==
      error "Not implemented"
      --map( (X:M):(List M) +-> horizSplit(X, lc)::(List M), vertSplit(A, lr))
